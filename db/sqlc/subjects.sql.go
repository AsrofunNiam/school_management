// // Code generated by sqlc. DO NOT EDIT.
// // versions:
// //   sqlc v1.25.0
// // source: subjects.sql

package db

// import (
// 	"context"
// 	"database/sql"
// )

// const deleteSubject = `-- name: DeleteSubject :exec
// DELETE
// FROM subjects 
// WHERE id = $1
// RETURNING id, name
// `

// func (q *Queries) DeleteSubject(ctx context.Context, id int64) error {
// 	_, err := q.db.ExecContext(ctx, deleteSubject, id)
// 	return err
// }

// const insertSubject = `-- name: InsertSubject :one
// INSERT INTO subjects (
//     id,
//     name
//     )VALUES (
//     $1,
//     $2
//     )
// RETURNING id, name
// `

// type InsertSubjectParams struct {
// 	ID   int64  `json:"id"`
// 	Name string `json:"name"`
// }

// func (q *Queries) InsertSubject(ctx context.Context, arg InsertSubjectParams) (Subject, error) {
// 	row := q.db.QueryRowContext(ctx, insertSubject, arg.ID, arg.Name)
// 	var i Subject
// 	err := row.Scan(&i.ID, &i.Name)
// 	return i, err
// }

// const selectSubject = `-- name: SelectSubject :one
// SELECT id, name
// FROM subjects 
// WHERE id = $1
// `

// func (q *Queries) SelectSubject(ctx context.Context, id int64) (Subject, error) {
// 	row := q.db.QueryRowContext(ctx, selectSubject, id)
// 	var i Subject
// 	err := row.Scan(&i.ID, &i.Name)
// 	return i, err
// }

// const selectSubjects = `-- name: SelectSubjects :many
// SELECT id, name
// FROM subjects
// `

// func (q *Queries) SelectSubjects(ctx context.Context) ([]Subject, error) {
// 	rows, err := q.db.QueryContext(ctx, selectSubjects)
// 	if err != nil {
// 		return nil, err
// 	}
// 	defer rows.Close()
// 	var items []Subject
// 	for rows.Next() {
// 		var i Subject
// 		if err := rows.Scan(&i.ID, &i.Name); err != nil {
// 			return nil, err
// 		}
// 		items = append(items, i)
// 	}
// 	if err := rows.Close(); err != nil {
// 		return nil, err
// 	}
// 	if err := rows.Err(); err != nil {
// 		return nil, err
// 	}
// 	return items, nil
// }

// const updateSubject = `-- name: UpdateSubject :exec
// UPDATE subjects
// SET name = coalesce($1, slug)
// WHERE id = $2
// RETURNING id, name
// `

// type UpdateSubjectParams struct {
// 	Name sql.NullString `json:"name"`
// 	ID   int64          `json:"id"`
// }

// func (q *Queries) UpdateSubject(ctx context.Context, arg UpdateSubjectParams) error {
// 	_, err := q.db.ExecContext(ctx, updateSubject, arg.Name, arg.ID)
// 	return err
// }

// const updateSubjectNew = `-- name: UpdateSubjectNew :one
// UPDATE subjects
// SET id = $1,
//     name = $2
// WHERE id = $3
// RETURNING id, name
// `

// type UpdateSubjectNewParams struct {
// 	ID   int64  `json:"id"`
// 	Name string `json:"name"`
// 	ID_2 int64  `json:"id_2"`
// }

// func (q *Queries) UpdateSubjectNew(ctx context.Context, arg UpdateSubjectNewParams) (Subject, error) {
// 	row := q.db.QueryRowContext(ctx, updateSubjectNew, arg.ID, arg.Name, arg.ID_2)
// 	var i Subject
// 	err := row.Scan(&i.ID, &i.Name)
// 	return i, err
// }
