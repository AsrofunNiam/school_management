// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: teacher.sql

package db

import (
	"context"
)

const createTeacher = `-- name: CreateTeacher :one
INSERT INTO teachers (
	nip
) VALUES (
  $1
)
RETURNING id, nip
`

func (q *Queries) CreateTeacher(ctx context.Context, nip string) (Teacher, error) {
	row := q.db.QueryRowContext(ctx, createTeacher, nip)
	var i Teacher
	err := row.Scan(&i.ID, &i.Nip)
	return i, err
}

const getTeacher = `-- name: GetTeacher :one
SELECT id, nip FROM teachers
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTeacher(ctx context.Context, id int64) (Teacher, error) {
	row := q.db.QueryRowContext(ctx, getTeacher, id)
	var i Teacher
	err := row.Scan(&i.ID, &i.Nip)
	return i, err
}

const listTeachers = `-- name: ListTeachers :many
SELECT id, nip FROM teachers
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListTeachersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTeachers(ctx context.Context, arg ListTeachersParams) ([]Teacher, error) {
	rows, err := q.db.QueryContext(ctx, listTeachers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Teacher
	for rows.Next() {
		var i Teacher
		if err := rows.Scan(&i.ID, &i.Nip); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
