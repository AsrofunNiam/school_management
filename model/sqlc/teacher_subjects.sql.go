// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: teacher_subjects.sql

package db

import (
	"context"
	"database/sql"
)

const deleteTeacherSubject = `-- name: DeleteTeacherSubject :exec
DELETE
FROM teacher_subjects
WHERE id = $1
RETURNING id, teacher_id, subject_id, period
`

func (q *Queries) DeleteTeacherSubject(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTeacherSubject, id)
	return err
}

const insertTeacherSubject = `-- name: InsertTeacherSubject :one
INSERT INTO teacher_subjects (
    id,
    teacher_id,
    subject_id,
    period
    )VALUES (
    $1,
    $2,
    $3,
    $4
    )
RETURNING id, teacher_id, subject_id, period
`

type InsertTeacherSubjectParams struct {
	ID        int64  `json:"id"`
	TeacherID int64  `json:"teacher_id"`
	SubjectID int64  `json:"subject_id"`
	Period    string `json:"period"`
}

func (q *Queries) InsertTeacherSubject(ctx context.Context, arg InsertTeacherSubjectParams) (TeacherSubject, error) {
	row := q.db.QueryRowContext(ctx, insertTeacherSubject,
		arg.ID,
		arg.TeacherID,
		arg.SubjectID,
		arg.Period,
	)
	var i TeacherSubject
	err := row.Scan(
		&i.ID,
		&i.TeacherID,
		&i.SubjectID,
		&i.Period,
	)
	return i, err
}

const selectJointTeacherSubject = `-- name: SelectJointTeacherSubject :one
SELECT t1.id, t1.subject_id, t1.teacher_id, t1.period, coalesce(t2.name, 'Register Subject')  As name_subject
FROM teacher_subjects t1
LEFT JOIN subjects t2 ON t2.id = t1.subject_id
WHERE t1.id = $1
`

type SelectJointTeacherSubjectRow struct {
	ID          int64  `json:"id"`
	SubjectID   int64  `json:"subject_id"`
	TeacherID   int64  `json:"teacher_id"`
	Period      string `json:"period"`
	NameSubject string `json:"name_subject"`
}

func (q *Queries) SelectJointTeacherSubject(ctx context.Context, id int64) (SelectJointTeacherSubjectRow, error) {
	row := q.db.QueryRowContext(ctx, selectJointTeacherSubject, id)
	var i SelectJointTeacherSubjectRow
	err := row.Scan(
		&i.ID,
		&i.SubjectID,
		&i.TeacherID,
		&i.Period,
		&i.NameSubject,
	)
	return i, err
}

const selectJointTeacherSubjects = `-- name: SelectJointTeacherSubjects :many
SELECT t1.id, t1.subject_id, t1.teacher_id, t1.period, coalesce(t2.name, 'Register Subject')  As name_subject
FROM teacher_subjects t1
LEFT JOIN subjects t2 ON t2.id = t1.subject_id
`

type SelectJointTeacherSubjectsRow struct {
	ID          int64  `json:"id"`
	SubjectID   int64  `json:"subject_id"`
	TeacherID   int64  `json:"teacher_id"`
	Period      string `json:"period"`
	NameSubject string `json:"name_subject"`
}

func (q *Queries) SelectJointTeacherSubjects(ctx context.Context) ([]SelectJointTeacherSubjectsRow, error) {
	rows, err := q.db.QueryContext(ctx, selectJointTeacherSubjects)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectJointTeacherSubjectsRow
	for rows.Next() {
		var i SelectJointTeacherSubjectsRow
		if err := rows.Scan(
			&i.ID,
			&i.SubjectID,
			&i.TeacherID,
			&i.Period,
			&i.NameSubject,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectTeacherSubject = `-- name: SelectTeacherSubject :one
SELECT id, teacher_id, subject_id, period
FROM teacher_subjects
WHERE id = $1
`

func (q *Queries) SelectTeacherSubject(ctx context.Context, id int64) (TeacherSubject, error) {
	row := q.db.QueryRowContext(ctx, selectTeacherSubject, id)
	var i TeacherSubject
	err := row.Scan(
		&i.ID,
		&i.TeacherID,
		&i.SubjectID,
		&i.Period,
	)
	return i, err
}

const selectTeacherSubjects = `-- name: SelectTeacherSubjects :many
SELECT id, teacher_id, subject_id, period
FROM teacher_subjects
`

func (q *Queries) SelectTeacherSubjects(ctx context.Context) ([]TeacherSubject, error) {
	rows, err := q.db.QueryContext(ctx, selectTeacherSubjects)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TeacherSubject
	for rows.Next() {
		var i TeacherSubject
		if err := rows.Scan(
			&i.ID,
			&i.TeacherID,
			&i.SubjectID,
			&i.Period,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTeacherSubject = `-- name: UpdateTeacherSubject :exec
UPDATE teacher_subjects
SET subject_id = coalesce($1, slug),
    teacher_id =  coalesce($2, slug),
    period =  coalesce($3, slug)
    
WHERE id = $4
RETURNING id, teacher_id, subject_id, period
`

type UpdateTeacherSubjectParams struct {
	SubjectID sql.NullInt64  `json:"subject_id"`
	TeacherID sql.NullInt64  `json:"teacher_id"`
	Period    sql.NullString `json:"period"`
	ID        int64          `json:"id"`
}

func (q *Queries) UpdateTeacherSubject(ctx context.Context, arg UpdateTeacherSubjectParams) error {
	_, err := q.db.ExecContext(ctx, updateTeacherSubject,
		arg.SubjectID,
		arg.TeacherID,
		arg.Period,
		arg.ID,
	)
	return err
}

const updateTeacherSubjectNew = `-- name: UpdateTeacherSubjectNew :one
UPDATE teacher_subjects
SET id = $1,
    teacher_id = $2,
    subject_id = $3,
    period = $4
WHERE id = $5
RETURNING id, teacher_id, subject_id, period
`

type UpdateTeacherSubjectNewParams struct {
	ID        int64  `json:"id"`
	TeacherID int64  `json:"teacher_id"`
	SubjectID int64  `json:"subject_id"`
	Period    string `json:"period"`
	ID_2      int64  `json:"id_2"`
}

func (q *Queries) UpdateTeacherSubjectNew(ctx context.Context, arg UpdateTeacherSubjectNewParams) (TeacherSubject, error) {
	row := q.db.QueryRowContext(ctx, updateTeacherSubjectNew,
		arg.ID,
		arg.TeacherID,
		arg.SubjectID,
		arg.Period,
		arg.ID_2,
	)
	var i TeacherSubject
	err := row.Scan(
		&i.ID,
		&i.TeacherID,
		&i.SubjectID,
		&i.Period,
	)
	return i, err
}
